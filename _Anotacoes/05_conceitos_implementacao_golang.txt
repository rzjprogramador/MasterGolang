# conceitos_implementacoes:

importacoes_entre_pacotes_diferentes:

exportaveis: um exportavel de pacote para outros Pacotes ... pode ser qualquer coisa que comece com Maiuscula ex: Funcao, Variavel, Objeto, etc... 

publico: use padrao SnackCase a primeira LetraMaiuscula :: para deixar publico e ser exportavel  sera uma VarPublicaExportavel.

privado: use nomeacao com primeira leetraMinuscula :: para nao poder exportar ser apenas um recipiente de uso do escopo local.

importacao_dentro_do_mesmo_pacote: consigo importar uma referencia minuscula somente se tiver dentro do mesmo pacote.

documentacao:
ao inserir  comentario que " inicia " com o nome da funcao PublicaExportavel ele vai para a documentacao da app no GoDoc.
obs: #rzj como nao gosto de comentario posso documentar em comentario na ultima linha do arquivo assim fica menos visivel melhor que encima da var Publica.

importacoes_pacotes:
pacotes sao os arquivos de modulos
as importacoes tambem seguem a arvore de pacotes.
o pacote da aplicacao o principal main acima e os outros pacotes dentro dele para poder serem vistos.

usar_importados: para usar modulos importados é sempre pelo nome depois da ultima barra:
ex: import modulo/tal ...uso no code :: tal.oQueTiver()

escopos:
escopoDoArquivo: no escopoDoArquivo que é fora da funcaoPrincipal vc declara seus valores...e faz a construcao para usar pronto a funcionalidade dentro da funcaoPrincipal.

no escopoDaFuncaoPrincipal vc atribui e usa os valores ja atribuidos no escopoDoArquivo.

resumo: declara sempre recipiente no escopoDoArquivo e usa estes valores ja atribuidos no escopoDaFuncaoPrincipal.

inferencia:: é quando o compliador ja adivinha / interfere / presume qual é o tipo.

declaracao_ja_com_atribuicao:
em go com o operador "  := "  ele ja faz a infetencia de tipo ou seja declara e atribui nao precisando adicionar var ou const.


